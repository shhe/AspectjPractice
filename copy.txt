package com.aspectj.plugin

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.compile.JavaCompile

import com.android.build.gradle.AppPlugin
import com.android.build.gradle.LibraryPlugin
import org.gradle.language.c.plugins.CPlugin

public class PracticePlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {

        def hasApp = project.plugins.withType(AppPlugin)
        def hasLib = project.plugins.withType(LibraryPlugin)

        if (!hasApp && !hasLib) {
            throw new IllegalStateException("'android' or 'android-library' plugin required.")
        }

        project.extensions.create('aspectJPlugin', PluginExtention)

        final def log = project.logger

        project.dependencies {
            implementation 'org.aspectj:aspectjrt:1.9.1'
        }

        def variants
        if (hasApp) {
            variants = project.android.applicationVariants
        } else {
            variants = project.android.libraryVariants
        }
        println("11111 " + project.name)


        project.afterEvaluate {
            variants.all { variant ->

                println("22222222 " + project.name + " 22222 "+variant.name.capitalize())

                if (!project.aspectJPlugin.enable) {
                    return
                }

                JavaCompile javaCompile = variant.javaCompile

                def buildTypeName = variant.name.capitalize()

                def aopTask = project.task("compile${buildTypeName}AspectJ") {
                    doLast {
                        String[] args = [
                                "-showWeaveInfo",
                                "-1.7",
                                "-inpath", javaCompile.destinationDir.toString(),
                                "-aspectpath", javaCompile.classpath.asPath,
                                "-d", javaCompile.destinationDir.toString(),
                                "-classpath", javaCompile.classpath.asPath,
                                "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)
                        ]
                        /*if (hasApp) {
                            args = [
                                    "-showWeaveInfo",
                                    "-1.7",
                                    "-inpath", javaCompile.destinationDir.toString(),
                                    "-aspectpath", javaCompile.classpath.asPath,
                                    "-d", javaCompile.destinationDir.toString(),
                                    "-classpath", javaCompile.classpath.asPath,
                                    "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)
                            ]
                        } else {
                            LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin)
                            args = [
                                    "-showWeaveInfo",
                                    "-1.7",
                                    "-inpath", javaCompile.destinationDir.toString(),
                                    "-aspectpath", javaCompile.classpath.asPath,
                                    "-d", javaCompile.destinationDir.toString(),
                                    "-classpath", javaCompile.classpath.asPath,
        //                            "-bootclasspath", plugin.getAndroidBuilder().getBootClasspath(true).join(File.pathSeparator)
                                    "-bootclasspath", plugin.project.android.bootClasspath.join(File.pathSeparator)


                            ]
                            println("-bootclasspath "+plugin.project.android.bootClasspath);
                        }*/
                        MessageHandler handler = new MessageHandler(true);
                        new Main().run(args, handler);

                        println()
                        println("####################################################################")
                        println("########                                                    ########")
                        println("########                                                    ########")
                        println("########            欢迎使用 aspectj 编译插件                  ########")
                        println("########          使用过程中碰到任何问题请联系我们                ########")
                        println("########                                                    ########")
                        println("########                                                    ########")
                        println("####################################################################")
                        println()

                        for (IMessage message : handler.getMessages(null, true)) {
                            switch (message.getKind()) {
                                case IMessage.ABORT:
                                case IMessage.ERROR:
                                case IMessage.FAIL:
                                    log.error message.message, message.thrown
                                    break;
                                case IMessage.WARNING:
                                    log.warn message.message, message.thrown
                                    break;
                                case IMessage.INFO:
                                    log.info message.message, message.thrown
                                    break;
                                case IMessage.DEBUG:
                                    log.debug message.message, message.thrown
                                    break;
                            }
                        }
                    }
                }

                variant.javaCompile.finalizedBy(aopTask)

                /*App主模块与其他库工程中的groovy构建语句唯一的差别是获取”-bootclasspath”的方法不同，
                主模块中配置是project.android.bootClasspath.join(File.pathSeparator)，
                而在库工程中则是plugin.getAndroidBuilder().getBootClasspath(true).join(File.pathSeparator)。*/

                println("22222222 " + project.name + " 22222 "+variant.name.capitalize())

//                println(project.name + " bootClasspath1111:  "+project.android.bootClasspath + " hasProperty：" + project.android.hasProperty('bootClasspath'))

//                javaCompile.doLast {
//                    String[] args = [
//                            "-showWeaveInfo",
//                            "-1.7",
//                            "-inpath", javaCompile.destinationDir.toString(),
//                            "-aspectpath", javaCompile.classpath.asPath,
//                            "-d", javaCompile.destinationDir.toString(),
//                            "-classpath", javaCompile.classpath.asPath,
//                            "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)
//                    ]
//                    /*if (hasApp) {
//                        args = [
//                                "-showWeaveInfo",
//                                "-1.7",
//                                "-inpath", javaCompile.destinationDir.toString(),
//                                "-aspectpath", javaCompile.classpath.asPath,
//                                "-d", javaCompile.destinationDir.toString(),
//                                "-classpath", javaCompile.classpath.asPath,
//                                "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)
//                        ]
//                    } else {
//                        LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin)
//                        args = [
//                                "-showWeaveInfo",
//                                "-1.7",
//                                "-inpath", javaCompile.destinationDir.toString(),
//                                "-aspectpath", javaCompile.classpath.asPath,
//                                "-d", javaCompile.destinationDir.toString(),
//                                "-classpath", javaCompile.classpath.asPath,
//    //                            "-bootclasspath", plugin.getAndroidBuilder().getBootClasspath(true).join(File.pathSeparator)
//                                "-bootclasspath", plugin.project.android.bootClasspath.join(File.pathSeparator)
//
//
//                        ]
//                        println("-bootclasspath "+plugin.project.android.bootClasspath);
//                    }*/
//                    MessageHandler handler = new MessageHandler(true);
//                    new Main().run(args, handler);
//
//                    println()
//                    println("####################################################################")
//                    println("########                                                    ########")
//                    println("########                                                    ########")
//                    println("########            欢迎使用 aspectj 编译插件                  ########")
//                    println("########          使用过程中碰到任何问题请联系我们                ########")
//                    println("########                                                    ########")
//                    println("########                                                    ########")
//                    println("####################################################################")
//                    println()
//
//                    for (IMessage message : handler.getMessages(null, true)) {
//                        switch (message.getKind()) {
//                            case IMessage.ABORT:
//                            case IMessage.ERROR:
//                            case IMessage.FAIL:
//                                log.error message.message, message.thrown
//                                break;
//                            case IMessage.WARNING:
//                                log.warn message.message, message.thrown
//                                break;
//                            case IMessage.INFO:
//                                log.info message.message, message.thrown
//                                break;
//                            case IMessage.DEBUG:
//                                log.debug message.message, message.thrown
//                                break;
//                        }
//                    }
//                }
            }
        }
    }
}